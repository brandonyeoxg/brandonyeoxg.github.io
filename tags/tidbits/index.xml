<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>tidbits on Hi I'm Brandon</title><link>https://brandonyeoxg.github.io/tags/tidbits/</link><description>Recent content in tidbits on Hi I'm Brandon</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sun, 05 Dec 2021 16:14:50 +0800</lastBuildDate><atom:link href="https://brandonyeoxg.github.io/tags/tidbits/index.xml" rel="self" type="application/rss+xml"/><item><title>GO Tidbits Antipattern Part 1</title><link>https://brandonyeoxg.github.io/posts/go-tidbits-anti-patterns-1/</link><pubDate>Sun, 05 Dec 2021 16:14:50 +0800</pubDate><guid>https://brandonyeoxg.github.io/posts/go-tidbits-anti-patterns-1/</guid><description>Many engineers that I&amp;rsquo;ve come across in my journey often mention that software engineering is a craft. When I read engineering books such as Code Complete, the concept of craftmenship and the gathering of &amp;ldquo;tools&amp;rdquo; for the &amp;ldquo;toolbox&amp;rdquo; were highlighted several times. That got me curious on what sort of &amp;ldquo;tools&amp;rdquo; I could gather.
In software engineering there is the concept of design patterns. These patterns. broadly speaking, are commonly used solutions to tackle problem spaces that they were design for.</description></item></channel></rss>